generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @unique @default(uuid()) @db.Uuid()
  picture  String?
  fullname String
  nickname String    @unique
  email    String    @unique
  password String
  posts    Post[]
  comments Comment[]
  token    Token[]
  staff    Staff?

  @@map("users")
}

model Staff {
  id     String  @id @unique @default(uuid()) @db.Uuid()
  role   Role
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique @map("user_id") @db.Uuid()
  token  Token[]
}

model Post {
  id        String    @id @unique @default(uuid()) @db.Uuid()
  title     String
  content   String[]
  pictures  String[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id") @db.Uuid()

  @@map("posts")
}

model Comment {
  id        String    @id @unique @default(uuid()) @db.Uuid()
  content   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id") @db.Uuid()

  @@map("comments")
}

model Token {
  id      Int      @id @default(autoincrement())
  jti     String   @unique @default(uuid()) @db.Uuid()
  aud     Role? // audience for this token to be used
  sub     String? // this api functionality name
  dat     String // data payload
  exp     DateTime // expiration
  user    User?    @relation(fields: [userId], references: [id])
  userId  String?  @map("user_id") @db.Uuid()
  staff   Staff?   @relation(fields: [staffId], references: [id])
  staffId String?  @map("staff_id") @db.Uuid()

  @@map("tokens")
}

enum Role {
  ADMIN
  MODERATOR
  OWNER

  @@map("roles")
}

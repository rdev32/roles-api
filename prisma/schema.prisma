generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @unique @default(uuid()) @db.Uuid()
  picture   String?
  firstname String
  lastname  String
  nickname  String    @unique
  email     String    @unique
  password  String
  role      Role      @default(USER)
  posts     Post[]
  comments  Comment[]
  token     Token[]

  @@map("users")
}

model Moderator {
  id       String  @id @unique @default(uuid()) @db.Uuid()
  picture  String?
  fullname String
  nickname String  @unique
  phone    String  @unique
  email    String  @unique
  password String
  role     Role    @default(MODERATOR)
  token    Token[]

  @@map("moderators")
}

model Post {
  id        String    @id @unique @default(uuid()) @db.Uuid()
  title     String
  content   String[]
  pictures  String[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id") @db.Uuid()
  comments  Comment[]

  @@map("posts")
}

model Comment {
  id        String    @id @unique @default(uuid()) @db.Uuid()
  content   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id") @db.Uuid()
  post      Post      @relation(fields: [postId], references: [id])
  postId    String    @unique @map("post_id") @db.Uuid()

  @@map("comments")
}

model Token {
  id     Int        @id @default(autoincrement())
  jti    String     @unique @default(uuid()) @db.Uuid()
  aud    Role?      // Specify who will use this token
  sub    String?    // Specify the use of this token
  dat    String?    // Sent payload data
  exp    DateTime   // Expiration date
  iss    String?    // Specify who created this token
  user   User?      @relation(fields: [userId], references: [id])
  userId String?    @map("user_id") @db.Uuid()
  mod    Moderator? @relation(fields: [modId], references: [id])
  modId  String?    @map("staff_id") @db.Uuid()

  @@map("tokens")
}

enum Role {
  ADMIN
  MODERATOR
  USER

  @@map("roles")
}
